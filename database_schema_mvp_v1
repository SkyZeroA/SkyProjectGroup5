DATABASE Schema Idea for MVP:
_____________________________________________________________

0) Create database & safe settings
Why: Ensures consistent character set, strict mode, and UTC timestamps.

CREATE DATABASE IF NOT EXISTS carbon_tracker
  CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;
USE carbon_tracker;

-- Ensure strict, predictable behaviour
SET sql_mode = 'STRICT_ALL_TABLES,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';
SET time_zone = '+00:00';

_____________________________________________________________

1) Organisation & Users
Why: You need employees, departments, and login identities before anything else.
Order: departments → users → auth → profiles → consents.

-- 1.1 Departments (optional, helps team/department leaderboards)
CREATE TABLE departments (
  id         CHAR(36) PRIMARY KEY,
  name       VARCHAR(255) NOT NULL,
  parent_id  CHAR(36),
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (parent_id) REFERENCES departments(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 1.2 Users (employees)
CREATE TABLE users (
  id            CHAR(36) PRIMARY KEY,
  email         VARCHAR(255) NOT NULL UNIQUE,
  employee_id   VARCHAR(50) UNIQUE,
  first_name    VARCHAR(100) NOT NULL,
  last_name     VARCHAR(100) NOT NULL,
  department_id CHAR(36),
  role          ENUM('employee','admin') NOT NULL DEFAULT 'employee',
  status        ENUM('active','inactive') NOT NULL DEFAULT 'active',
  created_at    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (department_id) REFERENCES departments(id),
  INDEX idx_users_email (email)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 1.3 Auth identities (SSO/local mapping)
CREATE TABLE user_auth_identities (
  id               CHAR(36) PRIMARY KEY,
  user_id          CHAR(36) NOT NULL,
  provider         ENUM('azuread','google','local') NOT NULL,
  provider_user_id VARCHAR(255) NOT NULL,
  password_hash    VARCHAR(255),
  mfa_enabled      BOOLEAN NOT NULL DEFAULT FALSE,
  last_login_at    DATETIME NULL,
  UNIQUE KEY uq_provider_user (provider, provider_user_id),
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 1.4 User preferences (timezone, units, weekly reset day)
CREATE TABLE user_profiles (
  user_id          CHAR(36) PRIMARY KEY,
  timezone         VARCHAR(100) NOT NULL DEFAULT 'UTC',
  preferred_units  ENUM('metric','imperial') NOT NULL DEFAULT 'metric',
  weekly_reset_dow TINYINT NOT NULL DEFAULT 1, -- 1=Monday
  allow_nudges     BOOLEAN NOT NULL DEFAULT TRUE,
  created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 1.5 Consent logs (privacy/GDPR)
CREATE TABLE consent_logs (
  id           CHAR(36) PRIMARY KEY,
  user_id      CHAR(36) NOT NULL,
  consent_type ENUM('privacy','analytics','email') NOT NULL,
  granted      BOOLEAN NOT NULL,
  occurred_at  DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  INDEX idx_consent_user_time (user_id, occurred_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

_____________________________________________________________

2) Questionnaire (versioned)
Why: New users fill this. It informs suggested actions and an initial baseline. Versioning allows changes later without breaking old responses.
Order: versions → questions → options → version_questions → responses.

-- 2.1 Questionnaire versions (lets you evolve the form)
CREATE TABLE questionnaire_versions (
  id         CHAR(36) PRIMARY KEY,
  version    INT NOT NULL UNIQUE,
  title      VARCHAR(255) NOT NULL,
  is_active  BOOLEAN NOT NULL DEFAULT FALSE,
  created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 2.2 Questions catalogue
CREATE TABLE questionnaire_questions (
  id          CHAR(36) PRIMARY KEY,
  code        VARCHAR(100) NOT NULL UNIQUE,  -- e.g., 'COMMUTE_MODE'
  category    VARCHAR(50) NOT NULL,          -- commute, energy, diet, waste, purchasing, travel, digital
  prompt      TEXT NOT NULL,
  input_type  ENUM('single','multi','number','boolean','scale') NOT NULL,
  help_text   TEXT,
  required    BOOLEAN NOT NULL DEFAULT FALSE,
  min_value   DECIMAL(12,4),
  max_value   DECIMAL(12,4),
  sort_order  INT NOT NULL DEFAULT 0,
  active_from DATETIME,
  active_to   DATETIME
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 2.3 Options (for single/multi-choice)
CREATE TABLE questionnaire_options (
  id                    CHAR(36) PRIMARY KEY,
  question_id           CHAR(36) NOT NULL,
  value_key             VARCHAR(100) NOT NULL,  -- canonical key, e.g. 'car_solo'
  label                 VARCHAR(255) NOT NULL,
  weight                DECIMAL(12,4),
  follow_up_question_id CHAR(36),
  sort_order            INT NOT NULL DEFAULT 0,
  UNIQUE KEY uq_q_value (question_id, value_key),
  FOREIGN KEY (question_id) REFERENCES questionnaire_questions(id) ON DELETE CASCADE,
  FOREIGN KEY (follow_up_question_id) REFERENCES questionnaire_questions(id) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 2.4 Attach questions to a particular version (controls order)
CREATE TABLE questionnaire_version_questions (
  questionnaire_version_id CHAR(36) NOT NULL,
  question_id              CHAR(36) NOT NULL,
  sort_order               INT NOT NULL DEFAULT 0,
  PRIMARY KEY (questionnaire_version_id, question_id),
  FOREIGN KEY (questionnaire_version_id) REFERENCES questionnaire_versions(id) ON DELETE CASCADE,
  FOREIGN KEY (question_id) REFERENCES questionnaire_questions(id) ON DELETE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 2.5 Store user responses (flexible across types)
CREATE TABLE user_responses (
  id                        CHAR(36) PRIMARY KEY,
  user_id                   CHAR(36) NOT NULL,
  questionnaire_version_id  CHAR(36) NOT NULL,
  question_id               CHAR(36) NOT NULL,
  option_id                 CHAR(36),        -- for single-choice
  value_text                TEXT,
  value_number              DECIMAL(12,4),
  value_boolean             BOOLEAN,
  value_json                JSON,            -- arrays for multi-select
  responded_at              DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  UNIQUE KEY uq_user_ver_q (user_id, questionnaire_version_id, question_id),
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (questionnaire_version_id) REFERENCES questionnaire_versions(id) ON DELETE RESTRICT,
  FOREIGN KEY (question_id) REFERENCES questionnaire_questions(id) ON DELETE RESTRICT,
  FOREIGN KEY (option_id) REFERENCES questionnaire_options(id) ON DELETE SET NULL,
  INDEX idx_responses_user (user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

_____________________________________________________________

3) Actions (what employees can log) & Recommendations
Why: Eco actions power the Eco Counter; recommendation rules personalize the dropdown based on answers.
Order: action_categories → eco_actions → user_custom_actions → recommendations.

-- 3.1 Action categories (grouping)
CREATE TABLE action_categories (
  id          CHAR(36) PRIMARY KEY,
  code        VARCHAR(50) NOT NULL UNIQUE,   -- commute, energy, diet, etc.
  name        VARCHAR(100) NOT NULL,
  description TEXT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 3.2 Standard eco actions (company-wide)
CREATE TABLE eco_actions (
  id               CHAR(36) PRIMARY KEY,
  category_id      CHAR(36) NOT NULL,
  code             VARCHAR(100) NOT NULL UNIQUE, -- e.g. 'cycle_to_work'
  name             VARCHAR(255) NOT NULL,
  description      TEXT,
  default_unit     VARCHAR(50) NOT NULL,         -- 'day','km','meal','item','kWh'
  min_step         DECIMAL(12,4) NOT NULL DEFAULT 1,
  allow_negative   BOOLEAN NOT NULL DEFAULT FALSE,
  points_per_unit  DECIMAL(12,4) NOT NULL,
  co2e_per_unit_kg DECIMAL(16,6) NOT NULL,       -- kgCO2e saved per unit
  source           VARCHAR(500),
  is_active        BOOLEAN NOT NULL DEFAULT TRUE,
  created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (category_id) REFERENCES action_categories(id) ON DELETE RESTRICT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 3.3 User-created actions (optional; can require approval)
CREATE TABLE user_custom_actions (
  id               CHAR(36) PRIMARY KEY,
  user_id          CHAR(36) NOT NULL,
  category_id      CHAR(36) NOT NULL,
  name             VARCHAR(255) NOT NULL,
  description      TEXT,
  unit             VARCHAR(50) NOT NULL,
  points_per_unit  DECIMAL(12,4) NOT NULL,
  co2e_per_unit_kg DECIMAL(16,6) NOT NULL,
  is_approved      BOOLEAN NOT NULL DEFAULT FALSE,
  created_at       TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (category_id) REFERENCES action_categories(id) ON DELETE RESTRICT,
  INDEX idx_custom_actions_user (user_id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 3.4 Recommendation rules (answers → actions)
CREATE TABLE question_option_recommendations (
  id          CHAR(36) PRIMARY KEY,
  question_id CHAR(36) NOT NULL,
  option_id   CHAR(36) NOT NULL,
  action_id   CHAR(36) NOT NULL,
  strength    TINYINT NOT NULL DEFAULT 1,  -- 1..5 relevance
  UNIQUE KEY uq_q_opt_action (question_id, option_id, action_id),
  FOREIGN KEY (question_id) REFERENCES questionnaire_questions(id) ON DELETE CASCADE,
  FOREIGN KEY (option_id) REFERENCES questionnaire_options(id) ON DELETE CASCADE,
  FOREIGN KEY (action_id) REFERENCES eco_actions(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE question_numeric_recommendations (
  id          CHAR(36) PRIMARY KEY,
  question_id CHAR(36) NOT NULL,
  min_value   DECIMAL(12,4),
  max_value   DECIMAL(12,4),
  action_id   CHAR(36) NOT NULL,
  strength    TINYINT NOT NULL DEFAULT 1,
  FOREIGN KEY (question_id) REFERENCES questionnaire_questions(id) ON DELETE CASCADE,
  FOREIGN KEY (action_id) REFERENCES eco_actions(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

_____________________________________________________________

4) Eco Counter (+/−) & Weekly Totals
Why: Every time someone logs an action, we store it. We also keep weekly totals so the leaderboard is fast.
Order: user_action_log → user_weekly_counters → user_weekly_action_totals → helpful index.

-- 4.1 Every + / - tap becomes a log row
CREATE TABLE user_action_log (
  id               CHAR(36) PRIMARY KEY,
  user_id          CHAR(36) NOT NULL,
  action_id        CHAR(36),
  custom_action_id CHAR(36),
  direction        ENUM('+','-') NOT NULL,
  quantity         DECIMAL(12,4) NOT NULL,      -- > 0
  unit             VARCHAR(50) NOT NULL,
  points_delta     DECIMAL(16,6) NOT NULL,      -- signed; compute in app or trigger
  co2e_delta_kg    DECIMAL(16,6) NOT NULL,      -- signed; compute in app or trigger
  occurred_at      DATETIME NOT NULL,           -- when user did it (UTC)
  recorded_at      TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  source           ENUM('manual','import','api') NOT NULL DEFAULT 'manual',
  notes            TEXT,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (action_id) REFERENCES eco_actions(id) ON DELETE SET NULL,
  FOREIGN KEY (custom_action_id) REFERENCES user_custom_actions(id) ON DELETE SET NULL,
  INDEX idx_actionlog_user_time (user_id, occurred_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 4.2 Weekly totals per user (fast leaderboard)
CREATE TABLE user_weekly_counters (
  id              CHAR(36) PRIMARY KEY,
  user_id         CHAR(36) NOT NULL,
  week_start_date DATE NOT NULL,                 -- Monday (UTC)
  total_points    DECIMAL(16,6) NOT NULL DEFAULT 0,
  total_co2e_kg   DECIMAL(16,6) NOT NULL DEFAULT 0,
  entries_count   INT NOT NULL DEFAULT 0,
  last_updated    TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UNIQUE KEY uq_user_week (user_id, week_start_date),
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  INDEX idx_week_points (week_start_date, total_points DESC) -- fast top N
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 4.3 Weekly totals per action (for breakdowns)
CREATE TABLE user_weekly_action_totals (
  id               CHAR(36) PRIMARY KEY,
  user_id          CHAR(36) NOT NULL,
  week_start_date  DATE NOT NULL,
  action_id        CHAR(36),
  custom_action_id CHAR(36),
  total_quantity   DECIMAL(16,6) NOT NULL DEFAULT 0,
  total_points     DECIMAL(16,6) NOT NULL DEFAULT 0,
  total_co2e_kg    DECIMAL(16,6) NOT NULL DEFAULT 0,
  UNIQUE KEY uq_user_week_action (user_id, week_start_date, action_id, custom_action_id),
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (action_id) REFERENCES eco_actions(id) ON DELETE SET NULL,
  FOREIGN KEY (custom_action_id) REFERENCES user_custom_actions(id) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

_____________________________________________________________


5) Leaderboards (optional snapshots)
Why: You can compute the current week live from user_weekly_counters. If you want to store weekly/monthly winners, snapshot them here.

CREATE TABLE leaderboards (
  id           CHAR(36) PRIMARY KEY,
  period_type  ENUM('weekly','monthly') NOT NULL,
  period_start DATE NOT NULL,
  period_end   DATE NOT NULL,
  generated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  UNIQUE KEY uq_period (period_type, period_start)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE leaderboard_entries (
  id              CHAR(36) PRIMARY KEY,
  leaderboard_id  CHAR(36) NOT NULL,
  user_id         CHAR(36) NOT NULL,
  rank            INT NOT NULL,
  score           DECIMAL(16,6) NOT NULL,
  tie_breaker     DECIMAL(16,6),
  department_id   CHAR(36),
  UNIQUE KEY uq_lb_user (leaderboard_id, user_id),
  FOREIGN KEY (leaderboard_id) REFERENCES leaderboards(id) ON DELETE CASCADE,
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (department_id) REFERENCES departments(id) ON DELETE SET NULL,
  INDEX idx_leaderboard_rank (leaderboard_id, rank)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

_____________________________________________________________

6) Emissions (for dashboard charts)
Why: To chart CO₂ by category (commute, energy, diet…). Factors back the calculations.
Order: emission_categories → emission_factors → user_emissions_timeseries.

-- 6.1 Category list (commute, energy, diet, etc.)
CREATE TABLE emission_categories (
  id          CHAR(36) PRIMARY KEY,
  code        VARCHAR(50) NOT NULL UNIQUE,
  name        VARCHAR(100) NOT NULL,
  description TEXT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 6.2 Emission factors (kgCO2e per unit)
CREATE TABLE emission_factors (
  id               CHAR(36) PRIMARY KEY,
  region           VARCHAR(50) NOT NULL DEFAULT 'global',
  category_id      CHAR(36) NOT NULL,
  action_id        CHAR(36),                      -- optional: factor for a specific action
  unit             VARCHAR(50) NOT NULL,
  co2e_per_unit_kg DECIMAL(16,6) NOT NULL,
  source           VARCHAR(500),
  valid_from       DATE,
  valid_to         DATE,
  FOREIGN KEY (category_id) REFERENCES emission_categories(id) ON DELETE RESTRICT,
  FOREIGN KEY (action_id) REFERENCES eco_actions(id) ON DELETE SET NULL,
  INDEX idx_emf_category (category_id, region)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- 6.3 Stored totals for charts (fast rendering)
CREATE TABLE user_emissions_timeseries (
  id          CHAR(36) PRIMARY KEY,
  user_id     CHAR(36) NOT NULL,
  period_date DATE NOT NULL,                      -- start of day/week/month
  period_type ENUM('daily','weekly','monthly') NOT NULL,
  category_id CHAR(36) NOT NULL,
  co2e_kg     DECIMAL(16,6) NOT NULL DEFAULT 0,
  source      ENUM('calc','baseline') NOT NULL DEFAULT 'calc',
  UNIQUE KEY uq_user_period_cat (user_id, period_type, period_date, category_id),
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (category_id) REFERENCES emission_categories(id) ON DELETE RESTRICT,
  INDEX idx_timeseries_user (user_id, period_type, period_date)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

_____________________________________________________________

7) Gamification (optional)
Why: Badges keep people engaged.

CREATE TABLE badges (
  id            CHAR(36) PRIMARY KEY,
  code          VARCHAR(100) NOT NULL UNIQUE,
  name          VARCHAR(255) NOT NULL,
  description   TEXT,
  criteria_json JSON NOT NULL, -- e.g., {"weekly_points":{"gte":200}}
  icon_url      VARCHAR(500)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

CREATE TABLE user_badges (
  id         CHAR(36) PRIMARY KEY,
  user_id    CHAR(36) NOT NULL,
  badge_id   CHAR(36) NOT NULL,
  awarded_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
  UNIQUE KEY uq_user_badge (user_id, badge_id),
  FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  FOREIGN KEY (badge_id) REFERENCES badges(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

_____________________________________________________________

8) (Optional) Real‑time events (for instant leaderboard refresh)
Why: If you want instant updates for everyone, add an outbox for a tiny worker to publish WebSocket/SSE events reliably.

CREATE TABLE outbox_events (
  id             BIGINT PRIMARY KEY AUTO_INCREMENT,
  aggregate_type VARCHAR(50) NOT NULL,   -- e.g., 'leaderboard_week'
  aggregate_id   VARCHAR(100) NOT NULL,  -- e.g., '2025-09-29' (week_start_date)
  event_type     VARCHAR(100) NOT NULL,  -- e.g., 'points.changed'
  payload        JSON NOT NULL,          -- includes user_id, deltas, new totals
  occurred_at    DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  processed      BOOLEAN NOT NULL DEFAULT FALSE,
  processed_at   DATETIME NULL,
  INDEX idx_outbox_unprocessed (processed, occurred_at)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

_____________________________________________________________

What to do next (in order)

Seed data: insert departments, action categories, eco actions, and your questionnaire (questions + options + version).
Build the API:

POST /eco-counter → inserts into user_action_log and updates user_weekly_counters.
GET /leaderboard/current → reads top N from user_weekly_counters.


(Optional) Real-time: add a small worker to publish events from outbox_events, and have the frontend subscribe to a channel (WebSocket/SSE/SignalR).
Charts: roll up emissions into user_emissions_timeseries for fast dashboard rendering.
